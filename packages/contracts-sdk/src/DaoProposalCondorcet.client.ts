/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Decimal, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Addr} from "./types";
import {Duration, PercentageThreshold, InstantiateMsg, ExecuteMsg, Choice, Coin, Empty, IbcTimeout, IbcTimeoutBlock, UncheckedConfig, QueryMsg, Config, InfoResponse, ContractVersion, Status, Expiration, Cell, Winner, ProposalResponse, Proposal, Tally, M} from "./DaoProposalCondorcet.types";
export interface DaoProposalCondorcetReadOnlyInterface {
  contractAddress: string;
  proposal: ({
    id
  }: {
    id: number;
  }) => Promise<ProposalResponse>;
  config: () => Promise<Config>;
  dao: () => Promise<Addr>;
  info: () => Promise<InfoResponse>;
  nextProposalId: () => Promise<Uint64>;
}
export class DaoProposalCondorcetQueryClient implements DaoProposalCondorcetReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.proposal = this.proposal.bind(this);
    this.config = this.config.bind(this);
    this.dao = this.dao.bind(this);
    this.info = this.info.bind(this);
    this.nextProposalId = this.nextProposalId.bind(this);
  }

  proposal = async ({
    id
  }: {
    id: number;
  }): Promise<ProposalResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proposal: {
        id
      }
    });
  };
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  dao = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      dao: {}
    });
  };
  info = async (): Promise<InfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      info: {}
    });
  };
  nextProposalId = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      next_proposal_id: {}
    });
  };
}
export interface DaoProposalCondorcetInterface extends DaoProposalCondorcetReadOnlyInterface {
  contractAddress: string;
  sender: string;
  propose: ({
    choices
  }: {
    choices: Choice[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  vote: ({
    proposalId,
    vote
  }: {
    proposalId: number;
    vote: number[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  execute: ({
    proposalId
  }: {
    proposalId: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  close: ({
    proposalId
  }: {
    proposalId: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setConfig: ({
    closeProposalsOnExecutionFailure,
    minVotingPeriod,
    quorum,
    votingPeriod
  }: {
    closeProposalsOnExecutionFailure: boolean;
    minVotingPeriod?: Duration;
    quorum: PercentageThreshold;
    votingPeriod: Duration;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DaoProposalCondorcetClient extends DaoProposalCondorcetQueryClient implements DaoProposalCondorcetInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.propose = this.propose.bind(this);
    this.vote = this.vote.bind(this);
    this.execute = this.execute.bind(this);
    this.close = this.close.bind(this);
    this.setConfig = this.setConfig.bind(this);
  }

  propose = async ({
    choices
  }: {
    choices: Choice[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      propose: {
        choices
      }
    }, _fee, _memo, _funds);
  };
  vote = async ({
    proposalId,
    vote
  }: {
    proposalId: number;
    vote: number[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      vote: {
        proposal_id: proposalId,
        vote
      }
    }, _fee, _memo, _funds);
  };
  execute = async ({
    proposalId
  }: {
    proposalId: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute: {
        proposal_id: proposalId
      }
    }, _fee, _memo, _funds);
  };
  close = async ({
    proposalId
  }: {
    proposalId: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      close: {
        proposal_id: proposalId
      }
    }, _fee, _memo, _funds);
  };
  setConfig = async ({
    closeProposalsOnExecutionFailure,
    minVotingPeriod,
    quorum,
    votingPeriod
  }: {
    closeProposalsOnExecutionFailure: boolean;
    minVotingPeriod?: Duration;
    quorum: PercentageThreshold;
    votingPeriod: Duration;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_config: {
        close_proposals_on_execution_failure: closeProposalsOnExecutionFailure,
        min_voting_period: minVotingPeriod,
        quorum,
        voting_period: votingPeriod
      }
    }, _fee, _memo, _funds);
  };
}